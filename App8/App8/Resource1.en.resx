<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Alert" xml:space="preserve">
    <value>Alert</value>
  </data>
  <data name="apply" xml:space="preserve">
    <value>apply</value>
  </data>
  <data name="Are you sure?" xml:space="preserve">
    <value>Are you sure?</value>
  </data>
  <data name="Arrival" xml:space="preserve">
    <value>Arrival</value>
  </data>
  <data name="Arrivaldate" xml:space="preserve">
    <value>Date Arrival:</value>
    <comment>exitpage</comment>
  </data>
  <data name="Arrivaltime" xml:space="preserve">
    <value>Departure time:</value>
  </data>
  <data name="Buy" xml:space="preserve">
    <value>Buy</value>
  </data>
  <data name="Car numbering" xml:space="preserve">
    <value>Car numbering</value>
  </data>
  <data name="ComentUpdate" xml:space="preserve">
    <value>Comment added successfully</value>
  </data>
  <data name="Contact" xml:space="preserve">
    <value>Contact</value>
  </data>
  <data name="cost" xml:space="preserve">
    <value>cost</value>
  </data>
  <data name="Coupe" xml:space="preserve">
    <value>Coupe</value>
  </data>
  <data name="Delay" xml:space="preserve">
    <value>Delay</value>
  </data>
  <data name="Departure" xml:space="preserve">
    <value>Departure</value>
  </data>
  <data name="Direction" xml:space="preserve">
    <value>Direction</value>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="Find" xml:space="preserve">
    <value>Find</value>
  </data>
  <data name="Forget" xml:space="preserve">
    <value>Forgot password?</value>
  </data>
  <data name="keyenter" xml:space="preserve">
    <value>Enter the Key from the email</value>
  </data>
  <data name="Leave your comment" xml:space="preserve">
    <value>Leave your comment</value>
  </data>
  <data name="Leave your photo with our staff or related to the railway" xml:space="preserve">
    <value>Leave your photo with our staff or related to the railway</value>
  </data>
  <data name="Log" xml:space="preserve">
    <value>Login</value>
    <comment>Логин</comment>
  </data>
  <data name="Loggo" xml:space="preserve">
    <value>Entry</value>
  </data>
  <data name="lun" xml:space="preserve">
    <value>English</value>
  </data>
  <data name="mailenter" xml:space="preserve">
    <value>Enter forgotten account email</value>
  </data>
  <data name="Masterbase" xml:space="preserve">
    <value>Train Schedule</value>
  </data>
  <data name="MasterComent" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="MasterLogI" xml:space="preserve">
    <value>LogIn</value>
  </data>
  <data name="Mastermain" xml:space="preserve">
    <value>Main Page</value>
  </data>
  <data name="MasterTable" xml:space="preserve">
    <value>Online Scoreboard</value>
  </data>
  <data name="newMail" xml:space="preserve">
    <value>Mail</value>
  </data>
  <data name="newPhone" xml:space="preserve">
    <value>Phone</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="No purchase possible" xml:space="preserve">
    <value>No purchase possible</value>
  </data>
  <data name="NoTicket" xml:space="preserve">
    <value>There are No tickets available</value>
  </data>
  <data name="Number of tickets" xml:space="preserve">
    <value>Number of tickets</value>
  </data>
  <data name="NumberTrain" xml:space="preserve">
    <value>Train number:</value>
  </data>
  <data name="OK" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="Password value does not match" xml:space="preserve">
    <value>Password value does not match</value>
  </data>
  <data name="Password1" xml:space="preserve">
    <value>Password 1</value>
  </data>
  <data name="Password2" xml:space="preserve">
    <value>Password 2</value>
  </data>
  <data name="Personal" xml:space="preserve">
    <value>information</value>
  </data>
  <data name="personal account" xml:space="preserve">
    <value>personal account</value>
  </data>
  <data name="Platform" xml:space="preserve">
    <value>Platform</value>
  </data>
  <data name="Point of arrival" xml:space="preserve">
    <value>Point of arrival</value>
  </data>
  <data name="Point of departure" xml:space="preserve">
    <value>Point of departure</value>
  </data>
  <data name="Redistration" xml:space="preserve">
    <value>Registration</value>
  </data>
  <data name="Reserved seat" xml:space="preserve">
    <value>Reserved seat</value>
  </data>
  <data name="revie" xml:space="preserve">
    <value>Leave feedback</value>
  </data>
  <data name="save" xml:space="preserve">
    <value>Saved successfully</value>
  </data>
  <data name="Save?" xml:space="preserve">
    <value>Save?</value>
  </data>
  <data name="Save?Text" xml:space="preserve">
    <value>Would you like to save your data?</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="Sedentary" xml:space="preserve">
    <value>Sedentary</value>
  </data>
  <data name="sendermail" xml:space="preserve">
    <value>Send</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="Started" xml:space="preserve">
    <value>Started</value>
  </data>
  <data name="SV" xml:space="preserve">
    <value>SV</value>
  </data>
  <data name="take" xml:space="preserve">
    <value>Return ticket</value>
  </data>
  <data name="The field is not selected" xml:space="preserve">
    <value>The field is not selected</value>
  </data>
  <data name="the password change is successful" xml:space="preserve">
    <value>the password change is successful</value>
  </data>
  <data name="This code is not valid" xml:space="preserve">
    <value>This code is not valid</value>
  </data>
  <data name="Track" xml:space="preserve">
    <value>Track</value>
  </data>
  <data name="Train" xml:space="preserve">
    <value>Train</value>
  </data>
  <data name="Type of car" xml:space="preserve">
    <value>Type of car</value>
  </data>
  <data name="User was not found" xml:space="preserve">
    <value>This user was not found</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="You got rid of the ticket successfully" xml:space="preserve">
    <value>You got rid of the ticket successfully</value>
  </data>
</root>